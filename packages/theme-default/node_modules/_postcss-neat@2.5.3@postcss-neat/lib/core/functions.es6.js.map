{"version":3,"sources":["core/functions.es6.js"],"names":["functions","percentage","value","toFixed","clearfix","Object","assign","getDirection","layout","direction","oppositeDirection","flexWidth","columns","containerColumns","column","gutter","replace","tmpWidth","tmpContainerWidth","flexGutter"],"mappings":"AAAA;;;;;AAEA,IAAIA,YAAY;AACd;AACAC,YAFc,wBAEQ;AAAA,QAAXC,KAAW,uEAAH,CAAG;;AACpBA,YAAQ,CAACA,KAAT;AACA,YAAUA,SAAS,CAAT,GAAa,CAACA,QAAQ,GAAT,EAAcC,OAAd,CAAsB,CAAtB,CAAb,GAAwCD,KAAlD;AACD,GALa;;;AAOd;AACAE,UARc,sBAQH;AACT,WAAO;AACL,eAAS,CADJ;AAEL,2BAAqB;AACnB,mBAAW,KADQ;AAEnB,mBAAW;AAFQ,OAFhB;AAML,iBAAW;AACT,iBAAS;AADA;AANN,KAAP;AAUD;AAnBa,CAAhB;;AAsBAJ,YAAYK,OAAOC,MAAP,CAAcN,SAAd,EAAyB;AACnC;AACA;AACAO,cAHmC,wBAGtBC,MAHsB,EAGd;AACnB,WAAO;AACLC,iBAAWD,WAAW,KAAX,GAAmB,OAAnB,GAA6B,MADnC;AAELE,yBAAmBF,WAAW,KAAX,GAAmB,MAAnB,GAA4B;AAF1C,KAAP;AAID,GARkC;;;AAUnC;AACAG,WAXmC,qBAWzBC,OAXyB,EAWhBC,gBAXgB,EAWEC,MAXF,EAWUC,MAXV,EAWkB;AACnDH,cAAU,CAACA,OAAX;AACAC,uBAAmB,CAACA,gBAApB;AACAC,aAAS,CAACA,OAAOE,OAAP,CAAe,IAAf,EAAqB,EAArB,EAAyBA,OAAzB,CAAiC,IAAjC,EAAuC,EAAvC,CAAV;AACAD,aAAS,CAACA,OAAOC,OAAP,CAAe,IAAf,EAAqB,EAArB,EAAyBA,OAAzB,CAAiC,IAAjC,EAAuC,EAAvC,CAAV;;AAEA,QAAIC,WAAWL,UAAUE,MAAV,GAAmB,CAACF,UAAU,CAAX,IAAgBG,MAAlD;AACA,QAAIG,oBAAoBL,mBAAmBC,MAAnB,GAA4B,CAACD,mBAAmB,CAApB,IAAyBE,MAA7E;;AAEA,WAAOE,WAAWC,iBAAlB,CATmD,CASd;AACtC,GArBkC;;;AAuBnC;AACAC,YAxBmC,sBAwBxBN,gBAxBwB,EAwBNC,MAxBM,EAwBEC,MAxBF,EAwBU;AAC3CF,uBAAmB,CAACA,gBAApB;AACAC,aAAS,CAACA,OAAOE,OAAP,CAAe,IAAf,EAAqB,EAArB,EAAyBA,OAAzB,CAAiC,IAAjC,EAAuC,EAAvC,CAAV;AACAD,aAAS,CAACA,OAAOC,OAAP,CAAe,IAAf,EAAqB,EAArB,EAAyBA,OAAzB,CAAiC,IAAjC,EAAuC,EAAvC,CAAV;;AAEA,QAAIE,oBAAoBL,mBAAmBC,MAAnB,GAA4B,CAACD,mBAAmB,CAApB,IAAyBE,MAA7E;;AAEA,WAAOA,SAASG,iBAAhB,CAP2C,CAOR;AACpC;AAhCkC,CAAzB,CAAZ;;kBAmCelB,S","file":"core/functions.es6.js","sourcesContent":["'use strict';\n\nlet functions = {\n  // Convert to percentage\n  percentage(value = 0) {\n    value = +value;\n    return `${value <= 1 ? (value * 100).toFixed(8) : value}%`;\n  },\n\n  // Simple clearfix\n  clearfix() {\n    return {\n      '*zoom': 1,\n      '&:before, &:after': {\n        'content': '\" \"',\n        'display': 'table'\n      },\n      '&:after': {\n        'clear': 'both'\n      }\n    };\n  }\n};\n\nfunctions = Object.assign(functions, {\n  // Sets layout direction and layout opposite direction to `@direction`\n  // and `@opposite-direction` accordingly.\n  getDirection(layout) {\n    return {\n      direction: layout === 'LTR' ? 'right' : 'left',\n      oppositeDirection: layout === 'LTR' ? 'left' : 'right'\n    };\n  },\n\n  // Sets neat grid column's width to `@column-width`.\n  flexWidth(columns, containerColumns, column, gutter) {\n    columns = +columns;\n    containerColumns = +containerColumns;\n    column = +column.replace('em', '').replace('px', '');\n    gutter = +gutter.replace('em', '').replace('px', '');\n\n    var tmpWidth = columns * column + (columns - 1) * gutter;\n    var tmpContainerWidth = containerColumns * column + (containerColumns - 1) * gutter;\n\n    return tmpWidth / tmpContainerWidth; // columnWidth\n  },\n\n  // Sets neat grid column's gutter (the white space between two columns) to `@column-gutter`.\n  flexGutter(containerColumns, column, gutter) {\n    containerColumns = +containerColumns;\n    column = +column.replace('em', '').replace('px', '');\n    gutter = +gutter.replace('em', '').replace('px', '');\n\n    var tmpContainerWidth = containerColumns * column + (containerColumns - 1) * gutter;\n\n    return gutter / tmpContainerWidth; // columnGutter\n  }\n});\n\nexport default functions;\n"],"sourceRoot":"/source/"}