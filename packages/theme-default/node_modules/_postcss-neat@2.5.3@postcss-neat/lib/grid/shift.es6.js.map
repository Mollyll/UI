{"version":3,"sources":["grid/shift.es6.js"],"names":["shift","columns","containerColumns","direction","options","neatGridColumns","neatDefaultDirection","directions","getDirection","columnWidth","flexWidth","neatColumnWidth","neatGutterWidth","columnGutter","flexGutter","oppositeDirection","percentage"],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,SAARA,KAAQ,CAACC,OAAD,EAAUC,gBAAV,EAA4BC,SAA5B,EAA+D;AAAA,MAAxBC,OAAwB;;AACzEF,qBAAmBA,oBAAoBE,QAAQC,eAA/C;AACAF,cAAYA,aAAaC,QAAQE,oBAAjC;;AAEA,MAAIC,aAAa,sBAAUC,YAAV,CAAuBL,SAAvB,CAAjB;AACA,MAAIM,cAAc,sBAAUC,SAAV,CAAoB,CAApB,EAAuBR,gBAAvB,EAAyCE,QAAQO,eAAjD,EAAkEP,QAAQQ,eAA1E,CAAlB;AACA,MAAIC,eAAe,sBAAUC,UAAV,CAAqBZ,gBAArB,EAAuCE,QAAQO,eAA/C,EAAgEP,QAAQQ,eAAxE,CAAnB;AACA,yCACaL,WAAWQ,iBADxB,EAC8C,sBAAUC,UAAV,CAAqBf,UAAUQ,WAAV,GAAwBR,UAAUY,YAAvD,CAD9C;AAGD,CAVD;;kBAYeb,K","file":"grid/shift.es6.js","sourcesContent":["'use strict';\n\nimport variables from '../core/variables.es6.js';\nimport functions from '../core/functions.es6.js';\n\n// Translates an element horizontally by a number of columns, in a specific nesting context.\n//\n// @columns\n//   The number of columns to shift (required).\n//\n// @container-columns\n//   The number of columns of the parent element.\n//\n// @direction\n//  Sets the layout direction. Can be `LTR` (left-to-right) or `RTL` (right-to-left).\n//\n// @example - PostCSS Usage\n//   .element-neg {\n//     @neat-shift -3 6;\n//   }\n//\n//   .element-pos {\n//     @neat-shift 2;\n//   }\n//\n// @example - CSS output\n//   .element-neg {\n//     margin-left: -52.41457896%;\n//   }\n//\n//   .element-pos {\n//     margin-left: 17.0596086%;\n//   }\n//\n\nlet shift = (columns, containerColumns, direction, options = variables) => {\n  containerColumns = containerColumns || options.neatGridColumns;\n  direction = direction || options.neatDefaultDirection;\n\n  let directions = functions.getDirection(direction);\n  let columnWidth = functions.flexWidth(1, containerColumns, options.neatColumnWidth, options.neatGutterWidth);\n  let columnGutter = functions.flexGutter(containerColumns, options.neatColumnWidth, options.neatGutterWidth);\n  return {\n    [`margin-${directions.oppositeDirection}`]: functions.percentage(columns * columnWidth + columns * columnGutter)\n  };\n};\n\nexport default shift;\n"],"sourceRoot":"/source/"}