{"version":3,"sources":["neat-parser.js"],"names":["require","options","ampInsertedNodes","atRules","fillParent","query","direction","omega","maxWidth","outerContainer","padding","pad","display","row","columns","containerColumns","shift","location","showGrid","spanColumns","unwrapAmp","nodeSelector","node","indexOf","name","selectors","map","selector","replace","join","getGlobalSelector","parent","type","params","applyRuleSetToNode","ruleSet","currentAtRule","Object","keys","forEach","prop","rule","extRule","globalSelector","insertAfter","mediaNestedRule","parse","JSON","stringify","append","insertBefore","value","plugin","opts","assign","variables","root","walkAtRules","atRule","trim","split","remove"],"mappings":"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","file":"neat-parser.js","sourcesContent":["'use strict';\n\nrequire('babel-polyfill');\n\nimport postcss from 'postcss';\nimport neatCore from './core';\nimport neatGrid from './grid';\n\nlet options = {};\nlet ampInsertedNodes = {};\n\nconst atRules = {\n  'fill-parent' () {\n    return neatGrid.fillParent(options);\n  },\n  'omega' (query, direction) {\n    return neatGrid.omega(query, direction, options);\n  },\n  'outer-container' (maxWidth) {\n    return neatGrid.outerContainer(maxWidth, options);\n  },\n  'pad' (...padding) {\n    return neatGrid.pad(padding, options);\n  },\n  'row' (display) {\n    return neatGrid.row(display, options);\n  },\n  'shift' (columns, containerColumns, direction) {\n    return neatGrid.shift(columns, containerColumns, direction, options);\n  },\n  'show-grid' (columns, containerColumns, location, direction) {\n    return neatGrid.showGrid(columns, containerColumns, location, direction, options);\n  },\n  'span-columns' (columns, containerColumns, display, direction) {\n    return neatGrid.spanColumns(columns, containerColumns, display, direction, options);\n  }\n};\n\nconst unwrapAmp = (nodeSelector, node) => {\n  if (nodeSelector.indexOf('&:') >= 0 && node.name !== 'media') {\n    return node.selectors.map((selector) => {\n      return nodeSelector.replace(/&/g, selector);\n    }).join(',');\n  }\n  return nodeSelector;\n};\n\nconst getGlobalSelector = (node) => {\n  if (node.parent && node.parent.type === 'atrule') {\n    return `${node.parent.name} ${node.parent.params} ${node.selector}`;\n  } else if (node.name === 'media') {\n    return getGlobalSelector(node.parent);\n  }\n  return node.selector;\n};\n\nconst applyRuleSetToNode = (ruleSet, node, currentAtRule) => {\n  Object.keys(ruleSet).forEach((prop) => {\n    let rule = ruleSet[prop];\n    if (typeof rule === 'object') {\n      if (node.name !== 'media') {\n        let extRule = postcss.rule({ selector: unwrapAmp(prop, node) });\n        applyRuleSetToNode(rule, extRule);\n\n        let globalSelector = getGlobalSelector(node);\n        node.parent.insertAfter(ampInsertedNodes[globalSelector] || node, extRule);\n        ampInsertedNodes[globalSelector] = extRule;\n      } else {\n        let mediaNestedRule = postcss.parse(`${prop} ${JSON.stringify(rule).replace(/\"/g, '')}`);\n        node.append(mediaNestedRule);\n      }\n    } else {\n      if (currentAtRule) {\n        node.insertBefore(currentAtRule, { prop, value: rule });\n      } else {\n        node.append({ prop, value: rule });\n      }\n    }\n  });\n};\n\nexport default postcss.plugin('postcss-neat', (opts) => {\n  options = Object.assign({}, neatCore.variables, opts);\n  return (root) => {\n    ampInsertedNodes = {};\n    root.walkAtRules(/^neat-/i, (rule) => {\n      let atRule = rule.name.trim().replace('neat-', '');\n      if (atRules[atRule]) {\n        let params = rule.params.trim() ? rule.params.trim().split(' ') : [];\n        let ruleSet = atRules[atRule](...params);\n        applyRuleSetToNode(ruleSet, rule.parent, rule);\n      }\n      rule.remove();\n    });\n  };\n});\n"],"sourceRoot":"/source/"}